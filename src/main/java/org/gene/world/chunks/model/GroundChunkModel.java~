package org.gene.world.chunks.model;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Pixmap;

import java.util.Random;

/**
 * Chunk 100% terra: preenche o Pixmap inteiro com a mesma cor.
 * (Depois podemos adicionar pequenas variações procedurais, ruído, grãos etc.)
 */
public class GroundChunkModel implements ChunkModel {

    private final Color baseColor;
    private final Random random = new Random();

    public GroundChunkModel(Color baseColor) {
        this.baseColor = baseColor;
    }

    @Override
    public void fill(Pixmap pixmap) {
        int w = pixmap.getWidth();
        int h = pixmap.getHeight();

        // parâmetros de ruído simples
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {

                // base de ruído suave
                float noise = (float) (Math.sin(x * 0.15) * Math.cos(y * 0.12) * 0.1 + random.nextFloat() * 0.05);

                // pequenas manchas mais escuras
                float spot = 0;
                if (random.nextFloat() < 0.02) { // 2% de chance de mancha
                    spot = -0.2f - random.nextFloat() * 0.2f;
                }

                // variação total de brilho (-0.15 a +0.15)
                float variation = noise + spot;

                float r = clamp(baseColor.r + variation);
                float g = clamp(baseColor.g + variation * 0.8f);
                float b = clamp(baseColor.b + variation * 0.6f);

                pixmap.setColor(r, g, b, 1f);
                pixmap.drawPixel(x, y);
            }
        }
    }

    private float clamp(float v) {
        return Math.min(1f, Math.max(0f, v));
    }
}